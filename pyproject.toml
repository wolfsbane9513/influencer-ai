[project]
name = "influencerflow-ai"
version = "2.0.0"
description = "AI-powered influencer marketing campaign automation platform with voice negotiations and comprehensive workflow management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "InfluencerFlow Team", email = "team@influencerflow.ai"}
]
maintainers = [
    {name = "InfluencerFlow Team", email = "team@influencerflow.ai"}
]
keywords = ["influencer", "marketing", "ai", "automation", "voice", "negotiations", "campaigns"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business :: Financial",
    "Topic :: Communications :: Email",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.13"

# Core Dependencies
dependencies = [
    # Web Framework
    "fastapi>=0.115.12",
    "uvicorn[standard]>=0.34.2",
    "python-multipart>=0.0.20",
    
    # Data Validation and Settings
    "pydantic>=2.11.5",
    "pydantic-settings>=2.9.1",
    "python-dotenv>=1.1.0",
    
    # AI and Machine Learning
    "groq>=0.26.0",
    "openai>=1.82.1",
    "elevenlabs>=2.1.0",
    "sentence-transformers>=4.1.0",
    "numpy>=2.2.6",
    "scikit-learn>=1.6.1",
    
    # Database
    "sqlalchemy>=2.0.41",
    "psycopg2-binary>=2.9.10",
    
    # HTTP and Async
    "aiohttp>=3.12.6",
    "requests>=2.32.3",
    "httpx>=0.25.0",
    
    # Email and Communications
    "email-validator>=2.1.0",
    
    # Document Generation
    "reportlab>=4.0.7",
    "jinja2>=3.1.2",
    
    # File Processing
    "openpyxl>=3.1.2",
    
    # Background Tasks
    "celery>=5.3.4",
    "redis>=5.0.1",
    "apscheduler>=3.10.4",
    
    # Security
    "cryptography>=41.0.7",
    "passlib[bcrypt]>=1.7.4",
    
    # Data Processing
    "pandas>=2.1.4",
    
    # Monitoring
    "structlog>=23.2.0",
]

# Optional Dependencies
[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.23.2", 
    "pytest-cov>=4.0.0",
    "black>=25.1.0",
    "flake8>=7.2.0",
    "mypy>=1.8.0",
    "ipython>=8.18.1",
    "jupyter>=1.0.0",
]

# Production deployment
production = [
    "gunicorn>=21.2.0",
    "sentry-sdk>=1.38.0",
    "newrelic>=9.2.0",
]

# Enhanced notifications
notifications = [
    "twilio>=8.10.0",      # SMS notifications
    "slack-sdk>=3.26.0",   # Slack integration
    "discord.py>=2.3.2",   # Discord integration
]

# Advanced document processing
documents = [
    "weasyprint>=61.2",    # HTML to PDF
    "python-docx>=0.8.11", # Word documents
    "pillow>=10.1.0",      # Image processing
]

# Analytics and monitoring
analytics = [
    "matplotlib>=3.8.2",   # Charts and graphs
    "prometheus-client>=0.19.0", # Metrics
    "datadog>=0.48.0",     # Infrastructure monitoring
]

# All optional dependencies
all = [
    "influencerflow-ai[dev,production,notifications,documents,analytics]"
]

[project.urls]
Homepage = "https://github.com/influencerflow/influencerflow-ai"
Documentation = "https://docs.influencerflow.ai"
Repository = "https://github.com/influencerflow/influencerflow-ai.git"
"Bug Tracker" = "https://github.com/influencerflow/influencerflow-ai/issues"
Changelog = "https://github.com/influencerflow/influencerflow-ai/blob/main/CHANGELOG.md"

[project.scripts]
influencerflow = "main:main"
influencerflow-notifications = "services.notifications:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["agents", "api", "config", "models", "services", "data"]

[tool.hatch.build.targets.sdist]
include = [
    "/agents",
    "/api", 
    "/config",
    "/models",
    "/services",
    "/data",
    "/main.py",
    "/README.md",
    "/requirements.txt",
]

# Development Tools Configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info"
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "elevenlabs.*",
    "groq.*", 
    "sentence_transformers.*",
    "sklearn.*",
    "reportlab.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=. --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = [
    "agents",
    "api", 
    "config",
    "models",
    "services",
    "main"
]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]