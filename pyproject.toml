[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "influencerflow-ai"
version = "2.0.0"
description = "AI-Powered Influencer Marketing Campaign Automation Platform with ElevenLabs Voice Integration"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "InfluencerFlow Team", email = "team@influencerflow.ai" },
]
keywords = [
    "influencer-marketing",
    "ai",
    "automation",
    "elevenlabs",
    "voice-negotiation",
    "campaign-management"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    # Core Web Framework
    "fastapi>=0.104.1,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "python-multipart>=0.0.6",
    
    # Data Validation & Settings
    "pydantic>=2.4.2,<3.0.0",
    "pydantic-settings>=2.0.3,<3.0.0",
    
    # Environment & Configuration
    "python-dotenv>=1.0.0",
    
    # AI/ML Services
    "groq>=0.4.1",
    "openai>=1.3.8",
    "elevenlabs>=0.2.26",
    
    # ML/NLP Dependencies
    "sentence-transformers>=2.2.2",
    "numpy>=1.24.3",
    "scikit-learn>=1.3.0",
    "transformers>=4.21.0",
    
    # Data Processing
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",  # Excel file support
    "xlsxwriter>=3.1.0",  # Excel writing
    
    # PDF Processing
    "PyPDF2>=3.0.0",
    "pypdf>=3.0.0",
    
    # Template Engine
    "jinja2>=3.1.0",
    
    # Database
    "sqlalchemy>=2.0.23",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.12.0",  # Database migrations
    
    # HTTP/Async
    "aiohttp>=3.9.1",
    "requests>=2.31.0",
    "httpx>=0.25.0",  # Alternative HTTP client
    
    # Email Support
    "email-validator>=2.0.0",
    "aiosmtplib>=2.0.0",  # Async email
    
    # File Processing
    "python-magic>=0.4.27",  # File type detection
    "pillow>=10.0.0",  # Image processing
    
    # Security & Authentication
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    
    # Monitoring & Logging
    "structlog>=23.1.0",
    "prometheus-client>=0.17.0",
    
    # Task Queue (Optional)
    "celery>=5.3.0",
    "redis>=5.0.0",
    
    # Validation & Utilities
    "phonenumbers>=8.13.0",  # Phone number validation
    "pycountry>=22.3.13",  # Country codes
    
    # Development Utilities
    "rich>=13.5.0",  # Better console output
    "typer>=0.9.0",  # CLI interface
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.25.0",  # For testing FastAPI
    
    # Code Quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "bandit>=1.7.5",  # Security linting
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    
    # Development Tools
    "pre-commit>=3.5.0",
    "watchdog>=3.0.0",  # File watching
]

production = [
    # Production-specific dependencies
    "gunicorn>=21.2.0",
    "sentry-sdk[fastapi]>=1.38.0",  # Error tracking
    "prometheus-fastapi-instrumentator>=6.1.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/influencerflow-ai"
Documentation = "https://influencerflow-ai.readthedocs.io"
Repository = "https://github.com/yourusername/influencerflow-ai"
"Bug Tracker" = "https://github.com/yourusername/influencerflow-ai/issues"

[project.scripts]
influencerflow = "main:app"

[tool.hatch.version]
path = "main.py"

[tool.hatch.build.targets.wheel]
packages = ["agents", "api", "config", "data", "models", "services"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["agents", "api", "config", "models", "services"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["agents", "api", "config", "models", "services"]
omit = ["tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]